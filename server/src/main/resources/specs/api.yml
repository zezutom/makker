swagger: "2.0"
info:
  description: "Make (formerly Integromat) connector suite. Choose how do you want to manage your low-code and no-code scenarios from your code!"
  version: "1.0.0"
  title: "Makker API Server"
  contact:
    email: "zezulatomas@gmail.com"
externalDocs:
  description: "Find out more about Makker"
  url: "https://github.com/zezutom/makker"
basePath: "/"
tags:
  - name: "Scenarios"
    description: A scenario lets you create and run automated tasks in Make (formerly Integromat).
    externalDocs:
      description: "Find out more"
      url: "https://www.make.com/en/api-documentation/scenarios"
schemes:
  - "http"
  - "https"
consumes:
  - application/json
produces:
  - application/json
paths:
  /v1/scenarios:
    post:
      tags:
        - Scenarios
      description: |
        Create a new scenario from the provided blueprint.
        
        The `blueprint` can be passed as either a correctly escaped JSON string, or you can also provide a Base64-encoded value.

      operationId: "createScenarioV1"
      parameters:
        - name: body
          in: body
          description: "Scenario definition."
          required: true
          schema:
            $ref: '#/definitions/CreateScenarioRequest'
      responses:
        "201":
          description: "The created scenario."
          schema:
            $ref: '#/definitions/Scenario'
        "400":
          description: "Bad request."
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: "Bad request."
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v1/scenarios/{scenarioId}:
    patch:
      tags:
        - Scenarios
      summary: Update a scenario.
      description: "Updates a scenario by uploading of a new or updated blueprint"
      operationId: "updateScenarioV1"
      parameters:
        - in: path
          name: scenarioId
          required: true
          type: integer
          format: int64
          description: The unique ID of the scenario.
        - in: body
          name: body
          required: true
          description: Scenario definition.
          schema:
            $ref: '#/definitions/UpdateScenarioRequest'
      responses:
        "201":
          description: "The updated scenario."
          schema:
            $ref: '#/definitions/Scenario'
        "400":
          description: "Bad request."
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: "Bad request."
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v1/scenarios/{scenarioId}/blueprint:
    get:
      tags:
        - Scenarios
      summary: Get scenario's blueprint.
      description: "Download the blueprint (scenario definition) as a JSON string."
      operationId: "getScenarioBlueprintV1"
      parameters:
        - in: path
          name: scenarioId
          required: true
          type: integer
          format: int64
          description: The unique ID of the scenario.
      responses:
        "200":
          description: "The scenario's blueprint."
          schema:
            $ref: '#/definitions/Blueprint'
  /v1/scenarios/{scenarioId}/data:
    put:
      tags:
        - Scenarios
      summary: Set module data.
      description: "Updates a specific module in a scenario"
      operationId: "setModuleDataV1"
      parameters:
        - in: path
          name: scenarioId
          required: true
          type: integer
          format: int64
          description: The unique ID of the scenario.
        - in: body
          name: body
          required: true
          description: Module update definition.
          schema:
            $ref: '#/definitions/SetModuleDataRequest'
      responses:
        "200":
          description: "The update result."
          schema:
            $ref: '#/definitions/UpdateResult'
        "400":
          description: "Bad request."
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: "Bad request."
          schema:
            $ref: '#/definitions/ErrorResponse'
definitions:
  CreateScenarioRequest:
    type: "object"
    required:
      - teamId
      - folderId
      - blueprint
    properties:
      teamId:
        type: integer
        format: int64
        description: The unique ID of the team in which the scenario will be created.
      folderId:
        type: integer
        format: int64
        description: The unique ID of the folder in which you want to store created scenario.
      blueprint:
        type: string
        description: The scenario blueprint. To save resources, the blueprint is sent as a string, not as an object.
      encoded:
        type: boolean
        default: false
        description: Enable this option in order to pass the scenario blueprint as a Base64-encoded string. This option is disabled by default.
    example:
      teamId: 1
      folderId: 1
      blueprint: "{ \"name\": \"Empty integration\", \"flow\": [ { \"id\": 2, \"module\": \"json:ParseJSON\", \"version\": 1, \"metadata\": { \"designer\": { \"x\": -46, \"y\": 47, \"messages\": [ { \"category\": \"last\", \"severity\": \"warning\", \"message\": \"A transformer should not be the last module in the route.\" } ] } } } ], \"metadata\": { \"version\": 1, \"scenario\": { \"roundtrips\": 1, \"maxErrors\": 3, \"autoCommit\": true, \"autoCommitTriggerLast\": true, \"sequential\": false, \"confidential\": false, \"dataloss\": false, \"dlq\": false }, \"designer\": { \"orphans\": [ ] } } }"
  UpdateScenarioRequest:
    type: "object"
    required:
      - blueprint
    properties:
      blueprint:
        type: string
        description: The scenario blueprint. To save resources, the blueprint is sent as a string, not as an object.
      encoded:
        type: boolean
        default: false
        description: Enable this option in order to pass the scenario blueprint as a Base64-encoded string. This option is disabled by default.
    example:
      blueprint: "{ \"name\": \"Empty integration\", \"flow\": [ { \"id\": 2, \"module\": \"json:ParseJSON\", \"version\": 1, \"metadata\": { \"designer\": { \"x\": -46, \"y\": 47, \"messages\": [ { \"category\": \"last\", \"severity\": \"warning\", \"message\": \"A transformer should not be the last module in the route.\" } ] } } } ], \"metadata\": { \"version\": 1, \"scenario\": { \"roundtrips\": 1, \"maxErrors\": 3, \"autoCommit\": true, \"autoCommitTriggerLast\": true, \"sequential\": false, \"confidential\": false, \"dataloss\": false, \"dlq\": false }, \"designer\": { \"orphans\": [ ] } } }"
  SetModuleDataRequest:
    type: "object"
    required:
      - scenarioId
      - moduleId
      - fieldName
      - data
    properties:
      scenarioId:
        type: integer
        format: int64
        description: The unique ID of the scenario.
      moduleId:
        type: integer
        format: int64
        description: The unique ID of the module.
      fieldName:
        type: string
        description: The name of the updated field in the module.
      data:
        type: string
        description: The new field value. No validation is performed, the value can be set to anything you want. Use with care.
    example:
      scenarioId: 1
      moduleId: 1
      fieldName: jsonString
      data: "{\"greeting\":\"hello world\"}"
  Scenario:
    type: object
    required:
      - id
      - teamId
      - folderId
      - name
    properties:
      id:
        type: integer
        format: int64
      teamId:
        type: integer
        format: int64
      folderId:
        type: integer
        format: int64
      name:
        type: string
    example:
      id: 925
      teamId: 1
      folderId: 1
      name: "New scenario"
  Blueprint:
    type: object
    required:
      - name
      - json
    properties:
      name:
        type: string
        description: Scenario name.
      json:
        type: string
        description: The raw blueprint JSON.
      modules:
        type: array
        items:
          $ref: '#/definitions/Module'
    example:
      name: "Empty integration"
      modules:
        - id: 2
          name: "json:ParseJSON"
      json: "{ \"name\": \"Empty integration\", \"flow\": [ { \"id\": 2, \"module\": \"json:ParseJSON\", \"version\": 1, \"metadata\": { \"designer\": { \"x\": -46, \"y\": 47, \"messages\": [ { \"category\": \"last\", \"severity\": \"warning\", \"message\": \"A transformer should not be the last module in the route.\" } ] } } } ], \"metadata\": { \"version\": 1, \"scenario\": { \"roundtrips\": 1, \"maxErrors\": 3, \"autoCommit\": true, \"autoCommitTriggerLast\": true, \"sequential\": false, \"confidential\": false, \"dataloss\": false, \"dlq\": false }, \"designer\": { \"orphans\": [ ] } } }"
  Module:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
        description: The unique ID of the module within the scenario.
      name:
        type: string
        description: The module name.
  UpdateResult:
    type: object
    required:
      - result
    properties:
      result:
        type: boolean
        description: Returns `true` if the operation was successful, `false` otherwise.
    example:
      result: true
  ErrorResponse:
    description: "The server encountered an error while processing this request."
    type: object
    properties:
      errorCode:
        type: string
        description: "Error code."
      errorMessage:
        description: "A text message, presented primarily for troubleshooting purposes."
        type: string